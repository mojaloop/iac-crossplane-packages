name: üì¶ Crossplane Package Pipeline

on:
  workflow_call:
    inputs:
      CROSSPLANE_PACKAGES_DIR:
        required: true
        type: string
        description: "Directory containing Crossplane packages"

      CROSSPLANE_REGISTRY_URL:
        required: true
        type: string
        description: "URL of the container registry for Crossplane packages"

      SUBPATH:
        required: true
        type: string
        description: "Composition subpath to package"

      NEXT_VERSION:
        required: true
        type: string
        description: "Version tag for the package"

    secrets:
      REGISTRY_USERNAME:
        description: "Username for container registry to login"
        required: true

      REGISTRY_PASSWORD:
        description: "Password for container registry to login"
        required: true

jobs:
  # Package crossplane composition
  package-composition:
    name: üì¶ Package Crossplane Composition
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: üîë Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.CROSSPLANE_REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: üõ†Ô∏è Setup Crossplane CLI
        run: |
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh
          sudo mv crossplane /usr/local/bin/

      - name: ‚úÖ Validate and Prepare
        working-directory: ${{ inputs.CROSSPLANE_PACKAGES_DIR }}
        run: |
          echo "üîç Preparing package for ${{ inputs.SUBPATH }}"

          # Set up temp file path
          BUILD_OUTPUT="${{ runner.temp }}/build_output.log"
          echo "üìù Using temporary file: $BUILD_OUTPUT"

          # Run make all and display output in real-time
          set -o pipefail  # Ensure the pipeline returns non-zero if make fails
          make all PACKAGE_NAME=${{ inputs.SUBPATH }} 2>&1 | tee "$BUILD_OUTPUT"

          # Look for failure cases
          if grep -q "failure cases" "$BUILD_OUTPUT"; then
            echo "üîé Checking for validation failures..."
            # Find lines with non-zero failure cases
            if grep -E "[1-9][0-9]* failure cases" "$BUILD_OUTPUT"; then
              echo "‚ùå Validation failed! Found non-zero failure cases"
              exit 1
            fi
          fi

          # Check for validation errors marked with [x]
          FAILURE_COUNT=$(grep -c "\\[x\\]" "$BUILD_OUTPUT" || echo "0")
          if [ "$FAILURE_COUNT" -gt 0 ]; then
            echo "‚ùå Validation failed! Found $FAILURE_COUNT validation errors"
            grep "\\[x\\]" "$BUILD_OUTPUT"
            exit 1
          fi

          # Check for composition validation errors
          if grep -q "crossplane: error: composition's compositeTypeRef.kind" "$BUILD_OUTPUT"; then
            echo "‚ùå Composition validation failed! Found mismatched compositeTypeRef.kind"
            grep "crossplane: error: composition's compositeTypeRef.kind" "$BUILD_OUTPUT"
            exit 1
          fi

          # Check for missing schemas
          if grep -q "missing schemas" "$BUILD_OUTPUT"; then
            # Only fail if there's an actual error related to schemas
            # not just the normal "downloading schemas" messages
            if grep -q "error.*schema" "$BUILD_OUTPUT"; then
              echo "‚ùå Validation failed! Found schema errors"
              grep "error.*schema" "$BUILD_OUTPUT"
              exit 1
            else
              echo "‚ÑπÔ∏è Downloading missing schemas..."
              grep "schemas does not exist, downloading:" "$BUILD_OUTPUT"
            fi
          fi

          # Check for any other crossplane validation errors
          if grep -q "crossplane: error:" "$BUILD_OUTPUT"; then
            echo "‚ùå Crossplane validation failed! Found other validation errors"
            grep "crossplane: error:" "$BUILD_OUTPUT"
            exit 1
          fi

          # Clean up the temporary file
          rm -f "$BUILD_OUTPUT"

          echo "‚úÖ Validation completed successfully"

      - name: üì¶ Create Package
        working-directory: ${{ inputs.CROSSPLANE_PACKAGES_DIR }}
        run: |
          echo "üì¶ Packaging ${{ inputs.SUBPATH }} version ${{ inputs.NEXT_VERSION }}"
          # Create package directory if it doesn't exist
          mkdir -p ${{ inputs.SUBPATH }}/package
          crossplane xpkg build --package-root=${{ inputs.SUBPATH }}/configuration -o ${{ inputs.SUBPATH }}/package/${{ inputs.SUBPATH }}-${{ inputs.NEXT_VERSION }}.xpkg

      - name: üì§ Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.SUBPATH }}-package
          path: ${{ inputs.CROSSPLANE_PACKAGES_DIR }}/${{ inputs.SUBPATH }}/package/${{ inputs.SUBPATH }}-${{ inputs.NEXT_VERSION }}.xpkg
          if-no-files-found: error
          retention-days: 1

  # publish crossplane package
  publish-package:
    name: üì° Publish Crossplane Package
    runs-on: ubuntu-latest
    needs:
      - package-composition
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üì• Download Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.SUBPATH }}-package
          path: ./artifacts

      - name: üõ†Ô∏è Setup Crossplane CLI
        run: "curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh"

      - name: üîë Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.CROSSPLANE_REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: üöÄ Push Package to Registry
        run: |
          echo "üì° Publishing ${{ inputs.SUBPATH }} version ${{ inputs.NEXT_VERSION }} to registry"
          ./crossplane --verbose xpkg push -f ./artifacts/${{ inputs.SUBPATH }}-${{ inputs.NEXT_VERSION }}.xpkg ${{ inputs.CROSSPLANE_REGISTRY_URL }}/${{ inputs.SUBPATH }}:${{ inputs.NEXT_VERSION }}

      - name: üè∑Ô∏è Create and Push Git Tag
        if: ${{ !contains(inputs.NEXT_VERSION, '-pr') }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ inputs.SUBPATH }}/${{ inputs.NEXT_VERSION }}" -m "Release ${{ inputs.SUBPATH }}/v${{ inputs.NEXT_VERSION }}"
          git push origin "${{ inputs.SUBPATH }}/${{ inputs.NEXT_VERSION }}"

      - name: ‚ú® Summary
        run: |
          echo "‚úÖ Successfully published ${{ inputs.SUBPATH }} version ${{ inputs.NEXT_VERSION }} to ${{ inputs.CROSSPLANE_REGISTRY_URL }}"
          echo "‚úÖ Created and pushed git tag ${{ inputs.SUBPATH }}/${{ inputs.NEXT_VERSION }}"
