name: üîÑ Crossplane Matrix Pipeline

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - 'main'

jobs:
  check-commit:
    name: üìù Check Commit Message
    runs-on: ubuntu-latest
    steps:
      - name: üìÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Check Commit Messages
        run: |
          # Get all commits in the PR/branch
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            COMMITS=$(git log --format=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          else
            # For push events, check the pushed commits
            COMMITS=$(git log --format=%B ${{ github.event.before }}..${{ github.event.after }})
          fi

          # Conventional commit regex pattern
          # Format: type(scope): description
          PATTERN='^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([a-z0-9-]+\))?: .+'

          # Flag to track if any non-compliant commits were found
          FOUND_BAD_COMMIT=0

          while IFS= read -r COMMIT_MSG; do
            # Skip empty lines
            if [ -z "$COMMIT_MSG" ]; then
              continue
            fi

            # Check if it's a merge commit
            if [[ $COMMIT_MSG == "Merge"* ]]; then
              echo "Merge commit detected, skipping: $COMMIT_MSG"
              continue
            fi

            if ! echo "$COMMIT_MSG" | grep -qE "$PATTERN"; then
              echo "‚ùå Error: Found commit that doesn't follow conventional format:"
              echo "   $COMMIT_MSG"
              echo "   Expected format: type(scope): description"
              FOUND_BAD_COMMIT=1
            else
              echo "‚úÖ Valid commit message: $COMMIT_MSG"
            fi
          done <<< "$COMMITS"

          if [ $FOUND_BAD_COMMIT -eq 1 ]; then
            exit 1
          fi
          echo "All commit messages follow conventional format"

  detect-changes:
    name: üîç Detect Changed Packages
    needs: check-commit
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      - name: üìÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîé Determine Changed Packages
        id: set-matrix
        env:
          PR_HEAD: ${{ github.event.pull_request.head.sha || github.sha }}
          PR_BASE: ${{ github.event.pull_request.base.sha || '' }}
          BEFORE: ${{ github.event.before || '' }}
        run: |
          CROSSPLANE_PACKAGES_DIR="packages"
          DIRECTORIES=$(find ${CROSSPLANE_PACKAGES_DIR}/* -maxdepth 0 -type d -not -name '\.*' 2>/dev/null || echo "")
          CHANGED_DIRS=""
          BASE=""

          if [[ "${GITHUB_REF}" == 'refs/heads/main' ]]; then
            # On main branch, compare with previous commit
            BASE="${BEFORE:-HEAD^}"
          else
            # On any other branch, compare with main
            BASE="origin/main"
          fi

          for DIR in $DIRECTORIES; do
            if git diff --name-only $BASE HEAD | grep -q "^$DIR/"; then
              PACKAGE_NAME=$(basename "$DIR")
              CHANGED_DIRS="$PACKAGE_NAME;$CHANGED_DIRS"
            fi
          done

          if [ -z "$CHANGED_DIRS" ]; then
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            MATRIX="[$(echo $CHANGED_DIRS | sed -r 's/([^;.]*);/{\"directory\": \"\1\"},/g' | sed 's/,$//g')]"
            echo "matrix={\"include\": $MATRIX}" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

  process-packages:
    name: üì¶ Process Packages
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.has_changes == 'true' }}
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
      fail-fast: false
    uses: mojaloop/iac-crossplane-packages/.github/workflows/xplane_workflow.yaml@main
    secrets:
      REGISTRY_USERNAME: ${{ github.actor }}
      REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
    with:
      registry: ghcr.io/${{ github.repository }}
      package: ${{ matrix.directory }}
      release_name: ${{ github.ref_type == 'tag' && github.ref_name || '' }}
      packages_dir: packages
